# preprocess_data.py

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
import glob
from data.data_utils import frames_extraction
from configs.configs import parse_arguments

import numpy as np
from tqdm import tqdm  # Th∆∞ vi·ªán ƒë·ªÉ hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh, r·∫•t h·ªØu √≠ch!
import argparse

def preprocess_videos(data_dir, output_dir, image_height, image_width, sequence_length, video_extensions=['*.mp4', '*.avi', '*.mov']):

    classes_list = [d for d in os.listdir(data_dir) if os.path.isdir(os.path.join(data_dir, d))]


    print(f"T√¨m th·∫•y c√°c l·ªõp: {classes_list}")

    # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
    os.makedirs(output_dir, exist_ok=True)

    # L·∫∑p qua t·ª´ng l·ªõp
    for class_name in classes_list:
        print(f"\nƒêang x·ª≠ l√Ω l·ªõp: {class_name}")
        
        # T·∫°o th∆∞ m·ª•c con cho l·ªõp trong th∆∞ m·ª•c ƒë·∫ßu ra
        class_output_dir = os.path.join(output_dir, class_name)
        os.makedirs(class_output_dir, exist_ok=True)

        # L·∫•y t·∫•t c·∫£ c√°c ƒë∆∞·ªùng d·∫´n video cho l·ªõp hi·ªán t·∫°i
        video_paths = []
        class_input_dir = os.path.join(data_dir, class_name)
        for ext in video_extensions:
            video_paths.extend(glob.glob(os.path.join(class_input_dir, ext)))

        if not video_paths:
            print(f"C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y video n√†o cho l·ªõp '{class_name}'.")
            continue

        # L·∫∑p qua t·ª´ng video trong l·ªõp v√† x·ª≠ l√Ω n√≥
        for video_path in tqdm(video_paths, desc=f"Tr√≠ch xu·∫•t frames cho '{class_name}'"):
            # Tr√≠ch xu·∫•t frames s·ª≠ d·ª•ng h√†m b·∫°n ƒë√£ cung c·∫•p
            frames = frames_extraction(video_path, image_height, image_width, sequence_length)

            # Ch·ªâ l∆∞u n·∫øu tr√≠ch xu·∫•t th√†nh c√¥ng (tr·∫£ v·ªÅ m·ªôt m·∫£ng kh√¥ng r·ªóng)
            if frames is not None and len(frames) == sequence_length:
                # T·∫°o ƒë∆∞·ªùng d·∫´n file .npy ƒë·∫ßu ra
                video_filename = os.path.basename(video_path)
                video_name_without_ext = os.path.splitext(video_filename)[0]
                output_npy_path = os.path.join(class_output_dir, f"{video_name_without_ext}.npy")

                # L∆∞u m·∫£ng frames v√†o file .npy
                np.save(output_npy_path, frames)
            else:
                print(f"C·∫£nh b√°o: B·ªè qua video '{video_path}' do kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng frames ho·∫∑c l·ªói ƒë·ªçc file.")

    print("\nHo√†n t·∫•t qu√° tr√¨nh ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu!")
    print(f"T·∫•t c·∫£ c√°c t·ªáp .npy ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {output_dir}")


def main():
    """
    H√†m ch√≠nh ƒë·ªÉ ch·∫°y script t·ª´ d√≤ng l·ªánh.
    """
    # S·ª≠ d·ª•ng l·∫°i tr√¨nh ph√¢n t√≠ch ƒë·ªëi s·ªë t·ª´ file config c·ªßa b·∫°n
    args = parse_arguments()
    
    # Override paths based on environment
    import sys
    if 'kaggle' in sys.path[0].lower() or '/kaggle/' in os.getcwd():
        # Running on Kaggle
        if not hasattr(args, 'data_raw_dir') or args.data_raw_dir.startswith('/kaggle/input/violencedataset/'):
            args.data_raw_dir = "/kaggle/input/fight-data"  # Kaggle input path
            print(f"Kaggle environment detected. Using path: {args.data_raw_dir}")
        
        if not hasattr(args, 'data_preprocessed_dir') or args.data_preprocessed_dir.startswith('/kaggle/working/'):
            args.data_preprocessed_dir = "/kaggle/working/preprocessed_data"  # Kaggle output path
            print(f"Output will be saved to: {args.data_preprocessed_dir}")
    else:
        # Running locally
        if args.data_raw_dir.startswith('/kaggle/'):
            args.data_raw_dir = r"D:\code\FightDetection\dataset"
            print(f"Local environment detected. Using path: {args.data_raw_dir}")
        
        if args.data_preprocessed_dir.startswith('/kaggle/'):
            args.data_preprocessed_dir = r"D:\code\FightDetection\data\preprocessed"
            print(f"Output will be saved to: {args.data_preprocessed_dir}")

    # Check if the input directory exists
    if not os.path.exists(args.data_raw_dir):
        print(f"L·ªói: Th∆∞ m·ª•c d·ªØ li·ªáu g·ªëc kh√¥ng t·ªìn t·∫°i: {args.data_raw_dir}")
        print("Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n d·ªØ li·ªáu.")
        print("Tr√™n Kaggle, ƒë·∫£m b·∫£o dataset ƒë√£ ƒë∆∞·ª£c add v√†o notebook.")
        return

    # List contents of data directory for debugging
    print(f"\nN·ªôi dung c·ªßa th∆∞ m·ª•c {args.data_raw_dir}:")
    try:
        for item in os.listdir(args.data_raw_dir):
            item_path = os.path.join(args.data_raw_dir, item)
            if os.path.isdir(item_path):
                print(f"  üìÅ {item}/")
            else:
                print(f"  üìÑ {item}")
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ li·ªát k√™ n·ªôi dung: {e}")

    # In ra c√°c tham s·ªë s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng
    print("\nB·∫Øt ƒë·∫ßu qu√° tr√¨nh ti·ªÅn x·ª≠ l√Ω v·ªõi c√°c tham s·ªë sau:")
    print(f"Th∆∞ m·ª•c video g·ªëc: {args.data_raw_dir}")
    print(f"Th∆∞ m·ª•c ƒë·∫ßu ra: {args.data_preprocessed_dir}")
    print(f"K√≠ch th∆∞·ªõc ·∫£nh (H x W): {args.image_height} x {args.image_width}")
    print(f"S·ªë l∆∞·ª£ng frames m·ªói video: {args.sequence_length}")

    # G·ªçi h√†m ti·ªÅn x·ª≠ l√Ω
    preprocess_videos(
        data_dir=args.data_raw_dir, 
        output_dir=args.data_preprocessed_dir,
        image_height=args.image_height,
        image_width=args.image_width,
        sequence_length=args.sequence_length
    )


if __name__ == "__main__":
    main()